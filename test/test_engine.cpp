//=============================================================================
// test_engine.cpp
//
// author:
//    Dr. Randal J. Barnes
//    Department of Civil, Environmental, and Geo- Engineering
//    University of Minnesota
//
// version:
//    2 July 2017
//=============================================================================
#include <utility>

#include "test_engine.h"
#include "unit_test.h"
#include "..\src\engine.h"

//-----------------------------------------------------------------------------
// Hide all of the testing details inside an unnamed namespace. This allows me
// to create many small unit tests with polluting the global namespace.
//-----------------------------------------------------------------------------
namespace{
   const double TOLERANCE = 1e-9;

   //--------------------------------------------------------------------------
   // TestEngine
   //
   //    This is simply an example problem.  The "correct" solution was
   //    computed using the Matlab version of mizhodan.
   //--------------------------------------------------------------------------
   bool TestEngine()
   {
      static const double x_data[] = {
           0.00,         0.00,         0.00,         0.00,         0.00,        33.33,        33.33,        33.33,        66.67,        66.67,
         100.00,       100.00,       133.33,       166.67,       166.67,       166.67,       166.67,       200.00,       200.00,       200.00,
         233.33,       233.33,       266.67,       266.67,       266.67,       266.67,       300.00,       300.00,       333.33,       333.33,
         366.67,       366.67,       366.67,       366.67,       400.00,       400.00,       433.33,       433.33,       433.33,       433.33,
         433.33,       433.33,       466.67,       466.67,       466.67,       466.67,       466.67,       500.00,       500.00,       500.00,
         500.00,       533.33,       566.67,       566.67,       566.67,       566.67,       633.33,       633.33,       633.33,       633.33,
         633.33,       633.33,       633.33,       633.33,       666.67,       666.67,       666.67,       666.67,       666.67,       666.67,
         700.00,       700.00,       733.33,       733.33,       766.67,       766.67,       766.67,       766.67,       766.67,       800.00,
         800.00,       800.00,       833.33,       833.33,       833.33,       833.33,       833.33,       833.33,       833.33,       866.67,
         900.00,       900.00,       900.00,       900.00,       933.33,       966.67,       966.67,      1000.00,      1000.00,      1000.00,
        1000.00 };

      static const double y_data[] = {
           0.00,       500.00,       533.33,       766.67,       800.00,       100.00,       933.33,      1000.00,        33.33,        66.67,
         133.33,       466.67,       233.33,        33.33,       133.33,       900.00,       933.33,       100.00,       300.00,      1000.00,
          33.33,       133.33,       100.00,       500.00,       933.33,       966.67,       600.00,       766.67,       466.67,       533.33,
         100.00,       166.67,       433.33,       600.00,       200.00,      1000.00,         0.00,       100.00,       333.33,       366.67,
         400.00,       800.00,       133.33,       400.00,       466.67,       566.67,       933.33,        33.33,       133.33,       700.00,
         966.67,       133.33,         0.00,       100.00,       200.00,       966.67,         0.00,        33.33,        66.67,       100.00,
         300.00,       566.67,       633.33,       966.67,        33.33,       233.33,       600.00,       800.00,       900.00,       933.33,
         266.67,       566.67,       600.00,       966.67,        66.67,       500.00,       600.00,       633.33,       833.33,        66.67,
         266.67,      1000.00,        66.67,       100.00,       300.00,       366.67,       466.67,       600.00,       766.67,       166.67,
         600.00,       666.67,       800.00,       933.33,       400.00,       100.00,       200.00,       133.33,       266.67,       566.67,
         700.00 };

      static const double z_data[] = {
         108.03,       105.52,       101.94,        95.56,        92.45,        99.34,        89.03,        83.73,       100.50,       104.06,
         100.18,       103.07,       106.43,       101.14,       102.66,        84.75,        85.55,        96.83,        95.63,        80.58,
          96.56,        98.94,        94.00,        89.38,        92.22,        87.94,        96.48,        73.96,        87.63,        87.43,
          95.06,        96.27,        87.32,        82.40,       109.61,        98.02,        87.51,        90.94,        90.26,        85.98,
          86.28,        89.04,        89.55,        95.25,        92.12,        93.75,        92.63,        92.45,        87.85,        90.83,
          90.37,        90.94,        92.49,        89.53,        93.32,        94.75,        90.20,        92.86,        96.23,       102.72,
         103.14,       103.66,       103.70,        96.94,        89.02,       108.95,       104.24,       109.74,       111.75,       105.77,
         117.63,       106.17,       104.19,       102.87,       102.82,       111.26,       109.66,       114.20,       109.44,       104.45,
         125.84,       105.78,       110.62,       116.80,       126.66,       117.21,       109.99,       101.98,       120.85,       127.80,
         106.00,       101.03,       101.46,        96.70,       111.55,       115.76,       110.40,       113.96,       106.49,        92.68,
         96.41 };

      std::vector<double>x( x_data, x_data + sizeof(x_data)/sizeof(x_data[0]) );
      std::vector<double>y( y_data, y_data + sizeof(y_data)/sizeof(y_data[0]) );
      std::vector<double>z( z_data, z_data + sizeof(z_data)/sizeof(z_data[0]) );

   /*
      std::vector<Outlier> outliers;
      outliers = Aakozi_Engine(x,y,z,0.01);

      bool flag = true;

      flag &= CHECK( outliers.size() == 3 );

      flag &= CHECK( outliers[0].index == 34 );
      flag &= CHECK( isClose(outliers[0].zhat,    93.5148160515804, TOLERANCE) );
      flag &= CHECK( isClose(outliers[0].zscore,  3.43970663681202, TOLERANCE) );

      flag &= CHECK( outliers[1].index == 88 );
      flag &= CHECK( isClose(outliers[1].zhat,    106.083204587754, TOLERANCE) );
      flag &= CHECK( isClose(outliers[1].zscore,  3.06606747002609, TOLERANCE) );

      flag &= CHECK( outliers[2].index == 27 );
      flag &= CHECK( isClose(outliers[2].zhat,    90.5745922395216, TOLERANCE) );
      flag &= CHECK( isClose(outliers[2].zscore, -2.83612404250454, TOLERANCE) );

      return flag;
   */

      return true;
   }
}


//-----------------------------------------------------------------------------
// test_Engine
//-----------------------------------------------------------------------------
std::pair<int,int> test_Engine()
{
   int nsucc = 0;
   int nfail = 0;

   TALLY( TestEngine() );

   return std::make_pair( nsucc, nfail );
}
